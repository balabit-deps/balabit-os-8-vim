[Ubuntu note: Backport of the following patch with changes to match the current
code baseline. The variable textlock in src/ex_cmds.c matches with textwinlock
from the original patch. The test function in src/testdir/test_substitute.vim
was dropped as it was causing build errors in other tests that has no relation:
Test_visual_block_ctrl_w_f and Test_with_directories. These tests would fail
even if only the test was added (meaning that there is no relation with the fix
itself). And src/version.c was dropped.
-- Rodrigo Figueiredo Zaiden]

From e2bd8600b873d2cd1f9d667c28cba8b1dba18839 Mon Sep 17 00:00:00 2001
From: Bram Moolenaar <Bram@vim.org>
Date: Wed, 18 May 2022 13:11:57 +0100
Subject: [PATCH] patch 8.2.4977: memory access error when substitute
 expression changes window

Problem:    Memory access error when substitute expression changes window.
Solution:   Disallow changing window in substitute expression.
---
 src/ex_cmds.c                   | 11 +++++++++++
 src/testdir/test_substitute.vim | 13 +++++++++++++
 src/version.c                   |  2 ++
 3 files changed, 26 insertions(+)

--- vim-8.1.2269.orig/src/ex_cmds.c
+++ vim-8.1.2269/src/ex_cmds.c
@@ -4252,12 +4252,17 @@ do_sub(exarg_T *eap)
 		// Save flags for recursion.  They can change for e.g.
 		// :s/^/\=execute("s#^##gn")
 		subflags_save = subflags;
+
+                // Disallow changing text or switching window in an expression.
+		++textlock;
 #endif
 		// get length of substitution part
 		sublen = vim_regsub_multi(&regmatch,
 				    sub_firstlnum - regmatch.startpos[0].lnum,
 				    sub, sub_firstline, FALSE, p_magic, TRUE);
 #ifdef FEAT_EVAL
+                --textlock;
+
 		// If getting the substitute string caused an error, don't do
 		// the replacement.
 		// Don't keep flags set by a recursive call.
@@ -4359,9 +4364,16 @@ do_sub(exarg_T *eap)
 		mch_memmove(new_end, sub_firstline + copycol, (size_t)copy_len);
 		new_end += copy_len;
 
+#ifdef FEAT_EVAL
+		++textlock;
+#endif
+
 		(void)vim_regsub_multi(&regmatch,
 				    sub_firstlnum - regmatch.startpos[0].lnum,
 					   sub, new_end, TRUE, p_magic, TRUE);
+#ifdef FEAT_EVAL
+		--textlock;
+#endif
 		sub_nsubs++;
 		did_sub = TRUE;
 
