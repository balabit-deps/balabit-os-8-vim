From 32acf1f1a72ebb9d8942b9c9d80023bf1bb668ea Mon Sep 17 00:00:00 2001
From: Bram Moolenaar <Bram@vim.org>
Date: Thu, 7 Jul 2022 22:20:31 +0100
Subject: [PATCH] patch 9.0.0047: using freed memory with recursive substitute

Problem:    Using freed memory with recursive substitute.
Solution:   Always make a copy for reg_prev_sub.

--- vim-8.1.2269.orig/src/ex_cmds.c
+++ vim-8.1.2269/src/ex_cmds.c
@@ -3844,7 +3844,16 @@ do_sub(exarg_T *eap)
 	sub_copy = sub;
     }
     else
-	sub = regtilde(sub, p_magic);
+	{
+	   char_u *newsub = regtilde(sub, p_magic);
+
+	   if (newsub != sub)
+	   {
+	       // newsub was allocated, free it later.
+	       sub_copy = newsub;
+	       sub = newsub;
+	   }
+	}
 
     /*
      * Check for a match on each line.
--- vim-8.1.2269.orig/src/regexp.c
+++ vim-8.1.2269/src/regexp.c
@@ -1756,11 +1756,11 @@ regtilde(char_u *source, int magic)
 	}
     }
 
+    /* Store a copy of newsub  in reg_prev_sub.  It is always allocated,
+     * because recursive calls may make the returned string invalid. */
     vim_free(reg_prev_sub);
-    if (newsub != source)	/* newsub was allocated, just keep it */
-	reg_prev_sub = newsub;
-    else			/* no ~ found, need to save newsub  */
-	reg_prev_sub = vim_strsave(newsub);
+    reg_prev_sub = vim_strsave(newsub);
+
     return newsub;
 }
 
