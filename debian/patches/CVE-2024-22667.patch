Backport of:

---

From b39b240c386a5a29241415541f1c99e2e6b8ce47 Mon Sep 17 00:00:00 2001
From: Christian Brabandt <cb@256bit.org>
Date: Wed, 29 Nov 2023 11:34:05 +0100
Subject: [PATCH] patch 9.0.2142: [security]: stack-buffer-overflow in option
 callback functions

Problem:  [security]: stack-buffer-overflow in option callback functions
Solution: pass size of errbuf down the call stack, use snprintf()
          instead of sprintf()

We pass the error buffer down to the option callback functions, but in
some parts of the code, we simply use sprintf(buf) to write into the error
buffer, which can overflow.

So let's pass down the length of the error buffer and use sprintf(buf, size)
instead.

Reported by @henices, thanks!

Signed-off-by: Christian Brabandt <cb@256bit.org>

---

 src/map.c                             |  2 +-
 src/option.c                          | 14 ++++---
 src/option.h                          |  2 +
 src/optionstr.c                       | 59 +++++++++++++++++----------
 src/proto/optionstr.pro               |  4 +-
 src/structs.h                         |  2 +
 src/testdir/crash/poc_did_set_langmap |  1 +
 src/testdir/test_crash.vim            |  8 ++++
 src/version.c                         |  2 +
 9 files changed, 63 insertions(+), 31 deletions(-)
 create mode 100644 src/testdir/crash/poc_did_set_langmap

Index: vim-8.1.2269/src/option.c
===================================================================
--- vim-8.1.2269.orig/src/option.c
+++ vim-8.1.2269/src/option.c
@@ -1150,7 +1150,7 @@ do_set(
 {
     int		opt_idx;
     char	*errmsg;
-    char	errbuf[80];
+    char	errbuf[ERR_BUFLEN];
     char_u	*startarg;
     int		prefix;	/* 1: nothing, 0: "no", 2: "inv" in front of name */
     int		nextchar;	    /* next non-white char after option name */
@@ -1594,7 +1594,7 @@ do_set(
 			if (removing)
 			    value = *(long *)varp - value;
 			errmsg = set_num_option(opt_idx, varp, value,
-					   errbuf, sizeof(errbuf), opt_flags);
+					   errbuf, ERR_BUFLEN, opt_flags);
 		    }
 		    else if (opt_idx >= 0)		    /* string */
 		    {
@@ -2021,7 +2021,7 @@ do_set(
 			    errmsg = did_set_string_option(
 				    opt_idx, (char_u **)varp,
 				    new_value_alloced, oldval, errbuf,
-				    opt_flags, &value_checked);
+				    ERR_BUFLEN, opt_flags, &value_checked);
 
 			    secure = secure_saved;
 			}
Index: vim-8.1.2269/src/option.h
===================================================================
--- vim-8.1.2269.orig/src/option.h
+++ vim-8.1.2269/src/option.h
@@ -1285,3 +1285,5 @@ enum
 
 // Value for b_p_ul indicating the global value must be used.
 #define NO_LOCAL_UNDOLEVEL -123456
+
+#define ERR_BUFLEN 80
Index: vim-8.1.2269/src/optionstr.c
===================================================================
--- vim-8.1.2269.orig/src/optionstr.c
+++ vim-8.1.2269/src/optionstr.c
@@ -183,11 +183,11 @@ trigger_optionsset_string(
 #endif
 
     static char *
-illegal_char(char *errbuf, int c)
+illegal_char(char *errbuf, int errbuflen, int c)
 {
     if (errbuf == NULL)
 	return "";
-    sprintf((char *)errbuf, _("E539: Illegal character <%s>"),
+    snprintf((char *)errbuf, errbuflen, _("E539: Illegal character <%s>"),
 							(char *)transchar(c));
     return errbuf;
 }
@@ -533,7 +533,7 @@ set_string_option(
 	}
 #endif
 	if ((r = did_set_string_option(opt_idx, varp, TRUE, oldval, NULL,
-					   opt_flags, &value_checked)) == NULL)
+					   0, opt_flags, &value_checked)) == NULL)
 	    did_set_option(opt_idx, opt_flags, TRUE, value_checked);
 
 #if defined(FEAT_EVAL)
@@ -571,7 +571,8 @@ check_stl_option(char_u *s)
 {
     int		itemcnt = 0;
     int		groupdepth = 0;
-    static char errbuf[80];
+    static char errbuf[ERR_BUFLEN];
+    int		errbuflen = ERR_BUFLEN;
 
     while (*s && itemcnt < STL_MAX_ITEM)
     {
@@ -614,7 +615,7 @@ check_stl_option(char_u *s)
 	}
 	if (vim_strchr(STL_ALL, *s) == NULL)
 	{
-	    return illegal_char(errbuf, *s);
+	    return illegal_char(errbuf, errbuflen, *s);
 	}
 	if (*s == '{')
 	{
@@ -644,6 +645,7 @@ did_set_string_option(
     int		new_value_alloced,	// new value was allocated
     char_u	*oldval,		// previous value of the option
     char	*errbuf,		// buffer for errors, or NULL
+    int		errbuflen,		// length of error buffer
     int		opt_flags,		// OPT_LOCAL and/or OPT_GLOBAL
     int		*value_checked)		// value was checked to be save, no
 					// need to set P_INSECURE
@@ -1271,7 +1273,7 @@ did_set_string_option(
 		if (vim_strchr((char_u *)COM_ALL, *s) == NULL
 					     && !VIM_ISDIGIT(*s) && *s != '-')
 		{
-		    errmsg = illegal_char(errbuf, *s);
+		    errmsg = illegal_char(errbuf, errbuflen, *s);
 		    break;
 		}
 		++s;
@@ -1329,7 +1331,7 @@ did_set_string_option(
 	    // Check it's a valid character
 	    if (vim_strchr((char_u *)"!\"%'/:<@cfhnrs", *s) == NULL)
 	    {
-		errmsg = illegal_char(errbuf, *s);
+		errmsg = illegal_char(errbuf, errbuflen, *s);
 		break;
 	    }
 	    if (*s == 'n')	// name is always last one
@@ -1356,7 +1358,7 @@ did_set_string_option(
 		{
 		    if (errbuf != NULL)
 		    {
-			sprintf(errbuf, _("E526: Missing number after <%s>"),
+			snprintf(errbuf, errbuflen, _("E526: Missing number after <%s>"),
 						    transchar_byte(*(s - 1)));
 			errmsg = errbuf;
 		    }
@@ -1789,7 +1791,7 @@ did_set_string_option(
 		break;
 	    if (vim_strchr((char_u *)".wbuksid]tU", *s) == NULL)
 	    {
-		errmsg = illegal_char(errbuf, *s);
+		errmsg = illegal_char(errbuf, errbuflen, *s);
 		break;
 	    }
 	    if (*++s != NUL && *s != ',' && *s != ' ')
@@ -1808,7 +1810,7 @@ did_set_string_option(
 		{
 		    if (errbuf != NULL)
 		    {
-			sprintf((char *)errbuf,
+			snprintf((char *)errbuf, errbuflen,
 				     _("E535: Illegal character after <%c>"),
 				     *--s);
 			errmsg = errbuf;
@@ -2265,7 +2267,7 @@ did_set_string_option(
 	    for (s = *varp; *s; ++s)
 		if (vim_strchr(p, *s) == NULL)
 		{
-		    errmsg = illegal_char(errbuf, *s);
+		    errmsg = illegal_char(errbuf, errbuflen, *s);
 		    break;
 		}
 	}
Index: vim-8.1.2269/src/proto/optionstr.pro
===================================================================
--- vim-8.1.2269.orig/src/proto/optionstr.pro
+++ vim-8.1.2269/src/proto/optionstr.pro
@@ -1,7 +1,7 @@
 /* optionstr.c */
 void didset_string_options(void);
 void trigger_optionsset_string(int opt_idx, int opt_flags, char_u *oldval, char_u *oldval_l, char_u *oldval_g, char_u *newval);
-char *did_set_string_option(int opt_idx, char_u **varp, int new_value_alloced, char_u *oldval, char *errbuf, int opt_flags, int *value_checked);
+char *did_set_string_option(int opt_idx, char_u **varp, int new_value_alloced, char_u *oldval, char *errbuf, int errbuflen, int opt_flags, int *value_checked);
 void check_buf_options(buf_T *buf);
 void free_string_option(char_u *p);
 void clear_string_option(char_u **pp);
