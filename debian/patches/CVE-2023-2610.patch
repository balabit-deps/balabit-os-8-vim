[Ubuntu note: removed changes made to version.c because they were not needed
 to fix the vulnerability. Tests added to test_substitute.vim in the original
 patch were removed here since they would hang in 32 bit architectures,
 causing builds to fail (this seems to be a consequence of the value set for
 MAXCOL, that, when changed to value 0x3fffffff when in 32 bit architectures,
 does not cause the tilde test to fail in these architectures, but because
 upstream did not provide any type of update that would imply that their
 original patch does not cover 32 bit architectures as of the date of
 application of this patch, no changes were made to MAXCOL and the test was
 simply removed instead, as changes to MAXCOL could end up introducing other
 possible unknown regressions). Modifications were also made to changes
 applied to regexp.c since this version of the code uses the multi-line
 comment format instead of the single-line comment format. An additional
 change was included in this patch so that the code could compile: file
 globals.h needs to include error message 'e_resulting_text_too_long', only
 added with commit eeed1c7ae0 (commit eeed1c7ae0 adds this variable to
 errors.h, however, this file only started existing after commit bc4c5051, not
 available in this version of vim).
 -- Camila Camargo de Matos <camila.camargodematos@canonical.com>]

Origin: backport, https://github.com/vim/vim/commit/ab9a2d884b3a4abe319606ea95a5a6d6b01cd73a

From ab9a2d884b3a4abe319606ea95a5a6d6b01cd73a Mon Sep 17 00:00:00 2001
From: Bram Moolenaar <Bram@vim.org>
Date: Tue, 9 May 2023 21:15:30 +0100
Subject: [PATCH] patch 9.0.1532: crash when expanding "~" in substitute causes
 very long text

Problem:    Crash when expanding "~" in substitute causes very long text.
Solution:   Limit the text length to MAXCOL.
---
 src/regexp.c                    | 30 +++++++++++++++++++-----------
 src/testdir/test_substitute.vim | 14 ++++++++++++++
 src/version.c                   |  2 ++
 3 files changed, 35 insertions(+), 11 deletions(-)

Index: vim-8.1.2269/src/regexp.c
===================================================================
--- vim-8.1.2269.orig/src/regexp.c
+++ vim-8.1.2269/src/regexp.c
@@ -1718,10 +1718,7 @@ do_Lower(int *d, int c)
 regtilde(char_u *source, int magic)
 {
     char_u	*newsub = source;
-    char_u	*tmpsub;
     char_u	*p;
-    int		len;
-    int		prevlen;
 
     for (p = newsub; *p; ++p)
     {
@@ -1730,24 +1727,36 @@ regtilde(char_u *source, int magic)
 	    if (reg_prev_sub != NULL)
 	    {
 		/* length = len(newsub) - 1 + len(prev_sub) + 1 */
-		prevlen = (int)STRLEN(reg_prev_sub);
-		tmpsub = alloc(STRLEN(newsub) + prevlen);
+		/* Avoid making the text longer than MAXCOL, it will cause
+		 * trouble at some point.
+		 */
+		size_t  prevsublen = STRLEN(reg_prev_sub);
+		size_t  newsublen = STRLEN(newsub);
+		if (prevsublen > MAXCOL || newsublen > MAXCOL
+					    || newsublen + prevsublen > MAXCOL)
+		{
+		    emsg(_(e_resulting_text_too_long));
+		    break;
+		}
+
+		char_u *tmpsub = alloc(newsublen + prevsublen);
 		if (tmpsub != NULL)
 		{
 		    /* copy prefix */
-		    len = (int)(p - newsub);	/* not including ~ */
-		    mch_memmove(tmpsub, newsub, (size_t)len);
+		    size_t prefixlen = p - newsub;      /* not including ~ */
+		    mch_memmove(tmpsub, newsub, prefixlen);
 		    /* interpret tilde */
-		    mch_memmove(tmpsub + len, reg_prev_sub, (size_t)prevlen);
+		    mch_memmove(tmpsub + prefixlen, reg_prev_sub,
+								prevsublen);
 		    /* copy postfix */
 		    if (!magic)
 			++p;			/* back off \ */
-		    STRCPY(tmpsub + len + prevlen, p + 1);
+		    STRCPY(tmpsub + prefixlen + prevsublen, p + 1);
 
-		    if (newsub != source)	/* already allocated newsub */
+		    if (newsub != source)	/* allocated newsub before */
 			vim_free(newsub);
 		    newsub = tmpsub;
-		    p = newsub + len + prevlen;
+		    p = newsub + prefixlen + prevsublen;
 		}
 	    }
 	    else if (magic)
Index: vim-8.1.2269/src/testdir/test_substitute.vim
===================================================================
--- vim-8.1.2269.orig/src/testdir/test_substitute.vim
+++ vim-8.1.2269/src/testdir/test_substitute.vim
@@ -755,3 +755,32 @@ func Test_sub_edit_scriptfile()
   delfunc EditScript
   bwipe!
 endfunc
+
+" This as it is currently hangs for a very long time when run in
+" 32 bit architectures, causing builds to fail. This version of
+" vim does not include variables such as v:numbersize or
+" v:sizeoflong that would allow us to check the system
+" architecture and run tests only when we find ourselves in a 64
+" bit system, and for that reason, the test is commented out.
+" Uncomment this at your own risk. Adding a conditional as the
+" one below at the beggining of the test allows it to run in only
+" 64 bit systems, but it is not considered the optimal solution:
+"
+"  let is_64_bits = match(strpart(readfile(resolve('/proc/' . getpid() . '/exe'), 'b', 1)[0], 4, 1), '\%x02') != -1
+"  if !is_64_bits
+"    return
+"  endif
+"
+" Check handling expanding "~" resulting in extremely long text.
+"func Test_substitute_tilde_too_long()
+"  enew!
+"
+"  s/.*/ixxx
+"  s//~~~~~~~~~AAAAAAA@(
+"
+  " Either fails with "out of memory" or "text too long".
+  " This can take a long time.
+"  call assert_fails('sil! norm &&&&&&&&&', 'E1240:')
+"
+"  bwipe!
+"endfunc
Index: vim-8.1.2269/src/globals.h
===================================================================
--- vim-8.1.2269.orig/src/globals.h
+++ vim-8.1.2269/src/globals.h
@@ -1658,6 +1658,7 @@ EXTERN char e_menuothermode[]	INIT(= N_(
 #endif
 EXTERN char e_invalwindow[]	INIT(= N_("E957: Invalid window number"));
 EXTERN char e_listarg[]		INIT(= N_("E686: Argument of %s must be a List"));
+EXTERN char e_resulting_text_too_long[]    INIT(= N_("E1240: Resulting text too long"));
 
 #ifdef FEAT_GUI_MAC
 EXTERN short disallow_gui	INIT(= FALSE);
